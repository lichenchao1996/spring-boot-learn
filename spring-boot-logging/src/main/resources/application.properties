#指定某包下日志级别
logging.level.com.licc=trace

#logging.path跟logging.file是冲突的,都指定logging.file起作用,一般指定logging.path
#指定目录 在当前磁盘根路径下创建spring文件夹和里面的log文件夹,使用spring.log作为默认文件
logging.path=/spring/log

#指定文件名 当前项目下(不指定路径)/指定路径下生成springboot.log日志
#logging.file=springboot.log
#logging.file=E:/springboot.log

#只能改掉个别的默认配置
#在控制台输出指定的日志格式
# %d{yyyy-MM-dd HH:mm:ss.SSS}:年月日时分秒 %thread:线程号 %-5level:级别从左对齐显示5个字符宽度 %logger{50}:全类名,50个字符 %msg:日志消息 %n:换行符
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n

#在指定文件中输出指定的日志格式
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} === [%thread] === %-5level === %logger{50} === %msg%n

#激活开发环境
#1.spring.profiles.active=dev
#2.EditConfigurations -> Configuration -> Program arguments:--spring.profiles.active=dev(default默认)

#指定配置
#给类路径下放上每个日志框架自己的配置文件即可,SpringBoot就不使用他的默认配置了
#logback.xml直接被日志框架识别了
#logback-spring.xml:日志框架就不直接加载日志的配置项,由SpringBoot加载解析日志配置,可以使用SpringBoot高级特性<SpringProfile>功能:可以指定某段配置只在某个环境下生效(详见logback-spring.xml文件),否则报错:no applicable action for [springProfile]

#切换日志框架
#根据slf4j的日志适配图,进行相关的日志框架切换(该排除的jar包排除,该导入的jar包导入)
#slf4j+log4j的方式(不推荐)
#切换log4j2(在原先的以来里排除掉starter-logging,使用starter-log4j2)